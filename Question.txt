
1. Selenium Arch

2. Wait

3. Thread.sleep and Flent(Differnce)

FluentWait wait = new FluentWait(driver);
.withTimeout(30, TimeUnit.SECONDS)
.pollingEvery(5, TimeUnit.SECONDS)
.ignoring(NoSuchElementException.class);

We can use explicit wait as a dynamic wait because it waits dynamically for specific conditions.

4. StaleException
Thus a stale element points to an element which is not present any more. There may be a case, when an element was in DOM initially but after modifications in Document Object Model (DOM), the element becomes stale and the StaleElementReferenceException is thrown if we make an attempt to access this element.

5. How to Handle:
How to solve stale element reference exception in selenium Solution 1
– You can refresh the page and again try for the same element. 
Example- If you are trying to click on link and getting the exception then try in below format 
Driver.navigate().refersh(); 
Driver.findElement(By.id(“ur element id”)).click();

5.throw & Throws

6. Exception

7. difference between chked and unchecked
Checked exceptions:
	File Not Found Exception
	No Such Field Exception
	Interrupted Exception
	No Such Method Exception
	Class Not Found Exception


UnChecked exceptions
	No Such Element Exception
	Undeclared Throwable Exception
	Empty Stack Exception
	Arithmetic Exception
	Null Pointer Exception
	Array Index Out of Bounds Exception
	Security Exception


Encapsulation:

Abstraction:

Interface:

difference Abstraction Interface

Collection:

Interfaces in Collection

Difference between LinkedList and ArrayList

Sting, StringBuilder,StringBuffer

Jenkins
how tocreate job
pipelines

JavaScriptExcutor

#3) Scenario Outline:
Scenario outlines are used when the same test has to be performed with different data set.
Let’s take the same example. We have to test login functionality with multiple different sets
of username and password.

Feature: Login Functionality Feature
In order to ensure Login Functionality works,
I want to run the cucumber test to verify it is working

Scenario Outline: Login Functionality

Given user navigates to SOFTWARETESTINGHELP.COM
When user logs in using Username as <username> and Password <password>
Then login should be successful
Examples:
|username |password |
|Tom |password1 |
|Harry |password2 |
|Jerry |password3 |

Background:
Background in Cucumber is used to define a step or series of steps that are common to all the tests in the feature file. It allows you to add some context to the scenarios for a feature where it is defined. A Background is much like a scenario containing a number of steps. But it runs before each and every scenario were for a feature in which it is defined.

Background: Flow till home page 
Given user on application landing page.
When user enter password
And user enter username
And user click on login button 
Then user navigates to application home page.

Hooks In Cucumber:
Unlike TestNG Annotaions, cucumber supports only two hooks (Before & After) which works at the start and the end of the test scenario. As the name suggests, @before hook gets executed well before any other test scenario, and @after hook gets executed after executing the scenario.

   @Before public void setUp(){    
      driver = new FirefoxDriver();    
   }    

   @After public void cleanUp(){    
      driver.close();    
   }    

Tags in Cucumber:
-------------------------
In Cucumber, tags are used to associate a test like smoke, regression etc. with a particular scenario.


Why do we use tags in cucumber?

If we have many scenarios in the feature file, to keep them in one group, we use tags in Cucumber, through which we will be able to prepare reports for specific scenarios under the same tag

How to ignore tags in Cucumber testing?
-------------------------------------------------
In the case, when we need to skip a test, then we can use Special symbol "~" within the tag. This Special Character also works to skip both Scenarios and Features. And this can also work in conjunction with OR or AND.

Example:
Suppose there is a group of @SmokeTest and @RegressionTest tests. Now, we need to skip the regression test, to do that, consider the following code:

tags={"@SmokeTest", "~@RegressionTest"}

SoftAssert HardAssert

Phase in Maven Life cycle

Final Keyword

Manual:

Smoke & Sanity

UserStory

Agile Ceremony









